Mr. Robot CTF — TryHackMe

This box is a tribute to the TV show Mr. Robot, centered around exploiting a vulnerable WordPress site through hidden credentials, reverse shell injection, and privilege escalation via a misconfigured SUID binary. It challenges attackers to combine reconnaissance, hash cracking, lateral movement, and system enumeration to capture three hidden flags. The experience mirrors a realistic progression from initial access to full root compromise.


1. Reconnaissance
I started by scanning the box and browsing the web interface. It was running WordPress on port 80. Checking /robots.txt, I found a file called fsocity.dic — clearly meant for use in brute-force attacks. That became my dictionary for Hydra.
Default username enumeration via /?author=1 didn’t work, so I needed to dig deeper.


2. Valid Username Discovery
To confirm valid usernames, I used Hydra with the dictionary:
bash
hydra -L fsocity.dic -p dummy 10.10.43.47 http-post-form "/wp-login.php:log=^USER^&pwd=^PASS^&wp-submit=Log In:F=Invalid username"

Hydra flagged elliot as a valid username, based on differences in the response string. With that locked in, I focused on finding the correct password.


3. Bypassing Brute-Force Noise
Instead of brute-forcing endlessly, I explored the /license directory manually and inspected the HTML. There I found a base64-encoded string hidden in a static comment.
Decoded it using CyberChef — result:
elliot:ER28-0652

The credentials worked. I logged into WordPress successfully as Elliot.


4. Reverse Shell Deployment via Plugin
Inside the admin dashboard, I accessed the Plugin Editor. I uploaded PentestMonkey’s PHP reverse shell and modified it with my IP and port.
On my local box I launched:
bash
nc -lvnp 9001

As soon as the plugin loaded, I got a reverse shell as the daemon user.


5. Post-Exploitation & Lateral Movement
Enumerating the file system revealed /home/robot/, which contained:
key-2-of-3.txt (unreadable)
password.raw-md5
Inside that file was:
robot:c3fcd3d76192e4007dfb496cca67e13b

I saved the hash and cracked it using John the Ripper:
bash
john --format=raw-md5 --wordlist=rockyou.txt hash.txt

John returned:
robot:hello

I switched users:
bash
su robot

That worked. As the user robot, I could read the second key — one step closer.


6. Root Escalation
Attempting sudo -l as robot returned:
Sorry, user robot may not run sudo on ip-10-10-43-47.

So I scanned for SUID binaries:
bash
find / -perm -4000 -type f 2>/dev/null

Found /usr/local/bin/nmap — version 3.81. That version supports interactive mode, which is exploitable.
I ran:
bash
/usr/local/bin/nmap --interactive

Inside the prompt:
!sh

Shell upgraded to root.


7. Final Flag
Navigated to /root/, found:
key-3-of-3.txt
04787ddef27c3dee1ee161b21670b4e4

All flags collected.
This box offered a great mix of web exploitation, manual recon, reverse shell deployment, hash cracking, and SUID abuse. Each step reinforced practical skills I’d use in a real-world engagement — especially the value of switching gears when brute-force tools fall short. I Would definitely recommend this challenge to others.

 
Reflection and Mitigation
This challenge simulated a real-world compromise of a poorly secured WordPress site. The attack chain included:
Exposed resources (fsocity.dic and /license) revealing usernames and credentials
Lack of brute-force protection against login attempts
Editable WordPress plugins enabling remote code execution
SUID misconfiguration on outdated nmap binary, allowing privilege escalation
 
What I Learned
Manual inspection can outperform automated tools when the environment is intentionally misleading or noisy.
Reverse shells and privilege escalation techniques remain powerful and widely applicable in vulnerable Linux environments.
Hash cracking, lateral movement, and chaining exploits together are essential in real-world penetration tests and CTFs alike.
 
How It Could Be Prevented
Disable plugin editing in WordPress:
Use define('DISALLOW_FILE_EDIT', true); in wp-config.php.
Enforce strong authentication:
Implement rate-limiting and CAPTCHA on login pages.
Sanitize file permissions:
Avoid leaving SUID bits on exploitable binaries (like old versions of nmap).
Restrict information exposure:
Remove unused directories, base64 comments, or leftover dev content.
Use principle of least privilege:
Limit user rights to only what's absolutely necessary — robot shouldn't own sensitive files if daemon can see them.
This box was a masterclass in chaining basic misconfigurations into full system compromise. It reinforces how layered defense — even small tweaks — can break the attack chain early. Ready for the next one!





